import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '../firebase/config';

interface DemoBookingData {
  name: string;
  email: string;
  phone: string;
  company: string;
  role: string;
  experience: string;
  goals: string;
  preferredTime: string;
  preferredDate: string;
  timezone: string;
  trainingInterest: string;
}

interface EmailData {
  bookingData: DemoBookingData;
  bookingId: string;
  googleMeetLink: string;
}

class EmailService {
  private apiEndpoint = '/api/send-demo-email';

  async sendDemoConfirmationEmail(emailData: EmailData): Promise<boolean> {
    try {
      const response = await fetch(this.apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(emailData),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      return result.success;
    } catch (error) {
      console.error('Error sending demo confirmation email:', error);
      return false;
    }
  }

  async sendReminderEmail(bookingId: string, email: string, demoDate: string, demoTime: string): Promise<boolean> {
    try {
      const response = await fetch('/api/send-reminder-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          bookingId,
          email,
          demoDate,
          demoTime,
          googleMeetLink: `https://meet.google.com/demo-${bookingId}-${demoDate.replace(/-/g, '')}`
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      return result.success;
    } catch (error) {
      console.error('Error sending reminder email:', error);
      return false;
    }
  }

  async sendFollowUpEmail(bookingId: string, email: string, demoDate: string): Promise<boolean> {
    try {
      const response = await fetch('/api/send-followup-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          bookingId,
          email,
          demoDate
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      return result.success;
    } catch (error) {
      console.error('Error sending follow-up email:', error);
      return false;
    }
  }

  generateGoogleMeetLink(bookingId: string, date: string, time: string): string {
    // This would typically be generated by Google Calendar API
    // For now, we'll create a placeholder link
    const meetingId = `demo-${bookingId}-${date.replace(/-/g, '')}`;
    return `https://meet.google.com/${meetingId}`;
  }

  generateCalendarInvite(bookingData: DemoBookingData, bookingId: string): string {
    const { name, email, preferredDate, preferredTime, trainingInterest } = bookingData;
    
    const startDate = new Date(`${preferredDate}T${preferredTime}:00`);
    const endDate = new Date(startDate.getTime() + 30 * 60000); // 30 minutes later
    
    const event = {
      summary: `DAxGENAI Demo - ${name}`,
      description: `Free 30-minute personalized demo session for ${trainingInterest}`,
      start: {
        dateTime: startDate.toISOString(),
        timeZone: 'Asia/Kolkata',
      },
      end: {
        dateTime: endDate.toISOString(),
        timeZone: 'Asia/Kolkata',
      },
      attendees: [
        { email: email },
        { email: 'trainer@daxgenai.com' }
      ],
      conferenceData: {
        createRequest: {
          requestId: bookingId,
          conferenceSolutionKey: {
            type: 'hangoutsMeet'
          }
        }
      }
    };

    // This would typically be sent to Google Calendar API
    return JSON.stringify(event);
  }

  async logEmailActivity(bookingId: string, emailType: string, success: boolean): Promise<void> {
    try {
      await addDoc(collection(db, 'email_logs'), {
        bookingId,
        emailType,
        success,
        timestamp: serverTimestamp(),
        sentAt: new Date().toISOString()
      });
    } catch (error) {
      console.error('Error logging email activity:', error);
    }
  }
}

export const emailService = new EmailService();
export default emailService;
